{"version":3,"sources":["webpack:///./examples/dynamic.js"],"names":["generateTreeNodes","treeNode","arr","key","props","eventKey","i","push","name","setLeaf","treeData","curKey","level","loopLeaf","data","lev","l","forEach","item","length","indexOf","children","isLeaf","getNewTreeData","child","loop","Demo","React","createClass","propTypes","getInitialState","checkedKeys","componentDidMount","setTimeout","setState","onSelect","info","console","log","onCheck","onLoadData","Promise","resolve","state","render","map","treeNodes","ReactDOM","document","getElementById"],"mappings":"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","file":"dynamic.js","sourcesContent":["import 'rc-tree/assets/index.less';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Tree, { TreeNode } from 'rc-tree';\r\n\r\nfunction generateTreeNodes(treeNode) {\r\n  const arr = [];\r\n  const key = treeNode.props.eventKey;\r\n  for (let i = 0; i < 3; i++) {\r\n    arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction setLeaf(treeData, curKey, level) {\r\n  const loopLeaf = (data, lev) => {\r\n    const l = lev - 1;\r\n    data.forEach((item) => {\r\n      if ((item.key.length > curKey.length) ? item.key.indexOf(curKey) !== 0 :\r\n        curKey.indexOf(item.key) !== 0) {\r\n        return;\r\n      }\r\n      if (item.children) {\r\n        loopLeaf(item.children, l);\r\n      } else if (l < 1) {\r\n        item.isLeaf = true;\r\n      }\r\n    });\r\n  };\r\n  loopLeaf(treeData, level + 1);\r\n}\r\n\r\nfunction getNewTreeData(treeData, curKey, child, level) {\r\n  const loop = (data) => {\r\n    if (level < 1 || curKey.length - 3 > level * 2) return;\r\n    data.forEach((item) => {\r\n      if (curKey.indexOf(item.key) === 0) {\r\n        if (item.children) {\r\n          loop(item.children);\r\n        } else {\r\n          item.children = child;\r\n        }\r\n      }\r\n    });\r\n  };\r\n  loop(treeData);\r\n  setLeaf(treeData, curKey, level);\r\n}\r\n\r\nconst Demo = React.createClass({\r\n  propTypes: {},\r\n  getInitialState() {\r\n    return {\r\n      treeData: [],\r\n      checkedKeys: [],\r\n    };\r\n  },\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        treeData: [\r\n          { name: 'pNode 01', key: '0-0' },\r\n          { name: 'pNode 02', key: '0-1' },\r\n          { name: 'pNode 03', key: '0-2', isLeaf: true },\r\n        ],\r\n        checkedKeys: ['0-0'],\r\n      });\r\n    }, 100);\r\n  },\r\n  onSelect(info) {\r\n    console.log('selected', info);\r\n  },\r\n  onCheck(checkedKeys) {\r\n    console.log(checkedKeys);\r\n    this.setState({\r\n      checkedKeys,\r\n    });\r\n  },\r\n  onLoadData(treeNode) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const treeData = [...this.state.treeData];\r\n        getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);\r\n        this.setState({ treeData });\r\n        resolve();\r\n      }, 500);\r\n    });\r\n  },\r\n  render() {\r\n    const loop = (data) => {\r\n      return data.map((item) => {\r\n        if (item.children) {\r\n          return <TreeNode title={item.name} key={item.key}>{loop(item.children)}</TreeNode>;\r\n        }\r\n        return (\r\n          <TreeNode title={item.name} key={item.key} isLeaf={item.isLeaf}\r\n            disabled={item.key === '0-0-0'}\r\n          />\r\n        );\r\n      });\r\n    };\r\n    const treeNodes = loop(this.state.treeData);\r\n    return (\r\n      <div>\r\n        <h2>dynamic render</h2>\r\n        <Tree\r\n          onSelect={this.onSelect}\r\n          checkable onCheck={this.onCheck} checkedKeys={this.state.checkedKeys}\r\n          loadData={this.onLoadData}\r\n        >\r\n          {treeNodes}\r\n        </Tree>\r\n      </div>\r\n    );\r\n  },\r\n});\r\n\r\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\r\n\n\n\n// WEBPACK FOOTER //\n// ./examples/dynamic.js"],"sourceRoot":""}